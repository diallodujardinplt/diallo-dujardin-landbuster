// Generated by dia2code
#ifndef STATE__GAME__H
#define STATE__GAME__H

#include <vector>
#include <memory>

namespace state {
  class Game;
  class Cell;
  class Land;
  class Player;
}

#include "Step.h"
#include "ItemType.h"
#include "Land.h"
#include "ConnectionType.h"
#include "Cell.h"
#include "Player.h"

namespace state {

  /// class Game - 
  class Game {
    // Associations
    // Attributes
  private:
    Step currentStep;
    unsigned int currentPlayer;
    ItemType activatedItem;
    std::vector< std::shared_ptr<Player> > players;
    std::vector< std::shared_ptr<Land> > lands;
    std::vector< std::vector<Cell> > cells;
    // Operations
  public:
    ~Game ();
    static Game& getInstance ();
    void init (unsigned int playersNumber);
    unsigned int getCurrentPlayer () const;
    void nextPlayer ();
    Step getCurrentStep () const;
    void setCurrentStep (Step step);
    ItemType getActivatedItem () const;
    void setActivatedItem (ItemType item);
    std::vector< std::shared_ptr<Land> > getLands () const;
    std::vector< std::shared_ptr<Player> > getPlayers () const;
    Cell& getCell (unsigned int x, unsigned int y);
    void generateMap ();
    unsigned int getDefense (std::shared_ptr<Land> land) const;
    unsigned int getAttack (std::shared_ptr<Land> attacker, std::shared_ptr<Land> defender) const;
    ConnectionType getConnection (std::shared_ptr<Land> landOne, std::shared_ptr<Land> landTwo) const;
  private:
    Game ();
    std::vector<unsigned int> generateAreas (std::vector< std::vector<int> >& ncells);
    unsigned int util_total (std::vector<unsigned int>& v);
    unsigned int util_min (std::vector<unsigned int>& v);
    unsigned int util_max (std::vector<unsigned int>& v);
  };

};

#endif
