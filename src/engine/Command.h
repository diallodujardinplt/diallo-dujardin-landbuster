// Generated by dia2code
#ifndef ENGINE__COMMAND__H
#define ENGINE__COMMAND__H

#include <vector>
#include <stack>
#include <memory>
#include <string>

namespace state {
  class Game;
  class Player;
  class Land;
}

#include "CommandType.h"
#include "state/Player.h"
#include "state/Land.h"
#include "state/ItemType.h"
#include "state/Game.h"

namespace engine {

  // abstract
  /// class Command - 
  class Command {
    // Associations
    // Attributes
  protected:
    CommandType type;
    unsigned int playerId;
    bool executed;
    std::stack<std::vector<std::shared_ptr<state::Land>>> executedDefeatLands;
    // Operations
  public:
    virtual std::string toString () const = 0;
    virtual bool isAllowed (state::Game& game) const = 0;
    /// 																																														
    /// @param game		(???) 
    virtual void execute (state::Game& game) = 0;
    virtual void rollback (state::Game& game) = 0;
    CommandType getType () const;
    unsigned int getPlayerId () const;
    virtual std::string toJSON () const = 0;
  protected:
    void defeat (state::Game& game, std::shared_ptr<state::Player> player, std::shared_ptr<state::Player> killer);
    void rollbackDefeat (state::Game& game, std::shared_ptr<state::Player> player, std::shared_ptr<state::Player> killer);
    void acquireLand (state::Game& game, std::shared_ptr<state::Land> land, std::shared_ptr<state::Player> newOwner);
    void rollbackAcquireLand (state::Game& game, std::shared_ptr<state::Land> land, std::shared_ptr<state::Player> newOwner);
    void acquireItem (state::Game& game, state::ItemType item, std::shared_ptr<state::Player> player);
    void rollbackAcquireItem (state::Game& game, state::ItemType item, std::shared_ptr<state::Player> player);
    void executeItem (state::Game& game, state::ItemType item, std::shared_ptr<state::Player> player);
    void rollbackExecuteItem (state::Game& game, state::ItemType item, std::shared_ptr<state::Player> player);
  };

};

#endif
