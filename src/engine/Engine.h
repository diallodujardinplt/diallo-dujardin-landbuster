// Generated by dia2code
#ifndef ENGINE__ENGINE__H
#define ENGINE__ENGINE__H

#include <queue>
#include <memory>

namespace engine {
  class Engine;
  class Command;
};
namespace state {
  class Player;
  class Land;
};
namespace engine {
  class MoveCommand;
  class AttackCommand;
  class ChoiceCommand;
  class ActionCommand;
};
namespace state {
  class Game;
}

#include "Command.h"
#include "state/Player.h"
#include "state/Land.h"
#include "state/ItemType.h"
#include "MoveCommand.h"
#include "AttackCommand.h"
#include "ChoiceCommand.h"
#include "ActionCommand.h"
#include "state/Game.h"

namespace engine {

  /// class Engine - 
  class Engine {
    // Associations
    // Attributes
  private:
    std::queue< std::shared_ptr<Command> > commandQueue;
    // Operations
  public:
    /// 	
    static Engine& getInstance ();
    void pushCommand (std::shared_ptr<Command> command);
    void flushCommands ();
    bool isAllowed (std::shared_ptr<Command> command);
    void defeat (std::shared_ptr<state::Player> player, std::shared_ptr<state::Player> killer);
    void acquireLand (std::shared_ptr<state::Land> land, std::shared_ptr<state::Player> newOwner);
    void acquireItem (state::ItemType item, std::shared_ptr<state::Player> player);
    void executeItem (state::ItemType item, std::shared_ptr<state::Player> player);
  private:
    Engine ();
    void execute (std::shared_ptr<Command> command);
  };

};

#endif
